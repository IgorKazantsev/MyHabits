import os
import urllib.parse
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv
from sqlalchemy.exc import OperationalError

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ .env
server = os.getenv("DB_HOST")
port = os.getenv("DB_PORT", "1433")
database = os.getenv("DB_DATABASE")
username = os.getenv("DB_USER")
password = os.getenv("DB_PASSWORD")
driver = os.getenv("DB_DRIVER", "ODBC Driver 17 for SQL Server")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = {"DB_HOST": server, "DB_DATABASE": database, "DB_USER": username, "DB_PASSWORD": password}
missing_vars = [key for key, value in required_vars.items() if not value]
if missing_vars:
    raise EnvironmentError(f"‚ùå Missing environment variables: {', '.join(missing_vars)}")

# üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
params = urllib.parse.quote_plus(
    f"DRIVER={driver};SERVER={server},{port};DATABASE={database};UID={username};PWD={password}"
)

DATABASE_URL = f"mssql+pyodbc:///?odbc_connect={params}"

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
try:
    engine = create_engine(DATABASE_URL)
except OperationalError as e:
    raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö") from e

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# üîπ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# ‚úÖ –í–æ—Ç —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å!
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
