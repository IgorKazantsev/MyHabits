from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models.user import User
from app.schemas.user_schema import UserRegister, UserLogin, UserResponse
from app.auth.auth_bcrypt import hash_password, verify_password
from app.auth.auth_handler import create_access_token
from app.log import logger
import time

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω prefix
router = APIRouter(
    prefix="/auth",
    tags=["Auth"]
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register", response_model=UserResponse)
def register(user: UserRegister, db: Session = Depends(get_db)):
    logger.info("üîπ START REGISTER ROUTE")
    logger.info(f"üì© Received data: {user.dict()}")
    start = time.time()

    try:
        existing = db.query(User).filter(User.email == user.email).first()
        if existing:
            logger.warning("‚ö†Ô∏è Email already registered")
            raise HTTPException(status_code=400, detail="Email already registered")

        new_user = User(
            username=user.username,
            email=user.email,
            password_hash=hash_password(user.password),
        )
        db.add(new_user)
        db.commit()
        db.refresh(new_user)

        logger.info("‚úÖ User registered successfully")
        return UserResponse(
            user_id=new_user.user_id,
            username=new_user.username,
            email=new_user.email
        )

    except Exception as e:
        logger.error(f"‚ùå ERROR during registration: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    finally:
        elapsed = round(time.time() - start, 2)
        logger.info(f"‚¨ÖÔ∏è Completed in {elapsed}s")

# üîê –õ–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT-—Ç–æ–∫–µ–Ω–∞
@router.post("/login")
def login(user: UserLogin, db: Session = Depends(get_db)):
    logger.info("üîπ START LOGIN ROUTE")
    logger.info(f"üì© Attempt login: {user.email}")
    start = time.time()

    try:
        db_user = db.query(User).filter(User.email == user.email).first()
        if not db_user or not verify_password(user.password, db_user.password_hash):
            logger.warning("‚ùå Invalid credentials")
            raise HTTPException(status_code=401, detail="Invalid credentials")

        token = create_access_token(data={"user_id": db_user.user_id})

        logger.info("‚úÖ Login successful")

        # ‚¨áÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω + —Ä–æ–ª—å
        return {
            "access_token": token,
            "token_type": "bearer",
            "role": db_user.role  # ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ!
        }

    except Exception as e:
        logger.error(f"‚ùå ERROR during login: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ")

    finally:
        elapsed = round(time.time() - start, 2)
        logger.info(f"‚¨ÖÔ∏è Completed in {elapsed}s")

